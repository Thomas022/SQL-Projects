#SQL Marketing Attribution Code

WITH last_touch AS(
  SELECT user_id,
  MAX(timestamp) AS 'last_touch_at'
  FROM page_visits
  WHERE page_name = '4 - purchase'
  GROUP BY user_id
), compare_tb AS(
   SELECT lt.user_id,
   lt.last_touch_at,
   pv.utm_source AS 'source', 
   pv.utm_campaign AS 'campaign'
   FROM last_touch AS 'lt'
   JOIN page_visits AS 'pv'
   ON lt.user_id = pv.user_id
   AND lt.last_touch_at = pv.timestamp
)
SELECT source,
campaign,
COUNT(*)
FROM compare_tb
GROUP BY 1, 2
ORDER BY 3 DESC;

WITH last_touch AS(
  SELECT user_id,
  MAX(timestamp) AS 'last_touch_at'
  FROM page_visits
  GROUP BY user_id
), compare_tb AS(
  SELECT lt.user_id,
  lt.last_touch_at,
  pv.utm_source AS 'source',
  pv.utm_campaign AS 'campaign'
  FROM last_touch AS 'lt'
  JOIN page_visits AS 'pv'
  ON lt.user_id = pv.user_id
  AND lt.last_touch_at = pv.timestamp
)
SELECT source,
campaign,
COUNT(*)
FROM compare_tb
GROUP BY 1,2
ORDER BY 3 DESC;

WITH first_touch AS (
    SELECT user_id,
        MIN(timestamp) as first_touch_at
    FROM page_visits
    GROUP BY user_id
    ), compare_tb
    AS (SELECT ft.user_id,
    ft.first_touch_at,
    pv.utm_source AS 'source',
		pv.utm_campaign AS 'campaign'
FROM first_touch ft
JOIN page_visits pv
    ON ft.user_id = pv.user_id
    AND ft.first_touch_at = pv.timestamp
    )
SELECT  source,
campaign,
COUNT(*)
FROM compare_tb
GROUP BY 1, 2
ORDER BY 3 DESC;

SELECT COUNT(DISTINCT utm_campaign) AS 'number_campaign'
FROM page_visits;

SELECT COUNT(DISTINCT utm_source) AS 'number_source'
FROM page_visits;

SELECT DISTINCT utm_source,
utm_campaign
FROM page_visits;

SELECT DISTINCT page_name
FROM page_visits;

SELECT DISTINCT COUNT(*), page_name
FROM page_visits
GROUP BY page_name;

