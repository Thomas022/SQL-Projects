 #SQL_User_Churn_Analyse Code
 
 SELECT MAX(subscription_start),MIN(subscription_start)
 FROM subscriptions
 LIMIT 100;

 SELECT COUNT(*)
 FROM subscriptions;

 SELECT COUNT(*)
 FROM subscriptions
 GROUP BY segment;

 WITH month AS (
   SELECT 
   '2017-01-01' AS 'first_day',
   '2017-01-31' AS 'last_day'
   UNION
   SELECT
   '2017-02-01' AS 'first_day',
   '2017-02-31' AS 'last_day'
   UNION
   SELECT
   '2017-03-01' AS 'first_day',
   '2017-03-31' AS 'last_day'
   FROM month
 ), cross_join AS (
   SELECT *
   FROM month
   CROSS JOIN subscriptions
 ), status AS (
   SELECT id,
   first_day AS month,
   segment,
   CASE
   WHEN subscription_start < first_day
   AND (subscription_end > first_day
   OR subscription_end IS NULL)
   THEN 1
   ELSE 0
   END as is_active,
   CASE
   WHEN  subscription_start < first_day
   AND (subscription_end BETWEEN first_day AND last_day)
   THEN 1
   ELSE 0
   END AS is_canceled
   FROM cross_join
 ), status_aggregate AS(
   SELECT SUM(status.is_active) AS sum_active,
   SUM(status.is_canceled) AS sum_canceled, month, segment
   FROM status
   GROUP BY  month, segment
 )
 SELECT ROUND(1.0 * status_aggregate.sum_canceled /
 status_aggregate.sum_active,2) AS churn_rate, month, segment
 FROM status_aggregate;

 WITH month AS (
   SELECT 
   '2017-01-01' AS first_day,
   '2017-01-31' AS last_day
   UNION
   SELECT
   '2017-02-01' AS first_day,
   '2017-02-31' AS last_day
   UNION
   SELECT
   '2017-03-01' AS first_day,
   '2017-03-31' AS last_day
   FROM month
 ), cross_join AS (
   SELECT *
   FROM month
   CROSS JOIN subscriptions
 ), status AS(
   SELECT id,
   first_day AS month,
   CASE
   WHEN subscription_start < first_day
   AND (subscription_end > first_day
   OR subscription_end IS NULL)
   THEN 1
   ELSE 0
   END AS is_active,
   CASE
   WHEN subscription_start < first_day
   AND (subscription_end BETWEEN first_day AND last_day)
   THEN 1
   ELSE 0
   END AS is_canceled
   FROM cross_join
 ), status_aggregate AS (
   SELECT SUM(is_active) AS sum_active,
   SUM(is_canceled) AS sum_canceled,
   month
   FROM status
   GROUP BY month
 )
 SELECT
 ROUND(1.0 * status_aggregate.sum_canceled /
 status_aggregate.sum_active,2) AS overall_churn_rate, month
 FROM status_aggregate
 GROUP BY month;
